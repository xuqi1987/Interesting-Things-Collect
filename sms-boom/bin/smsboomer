#!/usr/bin/env node
const program = require('caporal');
const chalk = require('chalk');
const boomer = require('../index');
const utils = require('../app/utils');
const updateProviders = require('../scripts/update-provider');

const pkg = require('../package.json');
program.version(pkg.version).description(pkg.description);

program
  .argument('<phone>', '手机号码')
  .option('-f, --forever', '永久运行，默认只运行一次', program.BOOLEAN, false)
  .option('--dev', '以开发者模式运行，则显示浏览器运行过程', program.BOOLEAN, false)
  .option('--launch <provider>', '如果是开发模式，则指定站点名称<provider>', program.STRING, '')
  .option('-c, --concurrency <number>', '设置并发数量', program.INT, 5)
  .action((argv, opts) => {
    const app = boomer(argv.phone || process.env.PHONE || '13800000000', {
      once: !opts.forever,
      isProduction: !opts.dev,
      launchProvider: opts.launch,
      concurrency: opts.concurrency
    });

    app
      .on('open', () => {
        utils.info(`打开浏览器...`);
      })
      .on('next', currentTarget => {
        utils.info(
          `进入到 ${chalk.green(currentTarget.name)} ${chalk.green.underline(currentTarget.url)}`
        );
      })
      .on('error', err => {
        if (err) {
          console.error(err);
        }
      })
      .on('closed', () => {
        utils.info(`关闭浏览器...`);
      })
      // bootstrap
      .emit('bootstrap');
  });

program
  .command('update')
  .description('更新远程的provider')
  .action((argv, opts) => {
    updateProviders().then(() => {
      console.info(`Get Remote Providers done!`);
    });
  });

program.parse(process.argv);
